devtools::install_github("rstudio/addinexamples", type = "source")
devtools::install_github("rstudio/addinexamples", type = "source")
install.packages("devtools")
devtools::install_github("rstudio/addinexamples", type = "source")
install.packages("Rtools")
install.packages("addinexamples")
addinexamples:::reformatAddin()
addinexamples:::findAndReplaceAddin()
addinexamples:::subsetAddin()
install.packages("esquisse")
esquisse:::esquisser()
mtcars
data <- mtcars
esquisse:::esquisser()
esquisse:::esquisser()
install.packages("ggThemeAssist")
install.packages("ggExtra")
shiny::runApp('RShiny/LiMMCov/LiMMCov-research-tool')
runApp()
runApp('RShiny/EXCITE app/EXCITE (with dynamic simmulation)')
runApp()
setwd("~/RShiny/EXCITE app/EXCITE (with dynamic simmulation)")
runApp()
shiny::runApp()
load("~/RShiny/EXCITE app/EXCITE (with dynamic simmulation)/data_3way.RData")
names(data_3way)
tree_model <- rpart(
HbA1c_Reduction ~ Treatment + BMI_Category + Physical_Activity,
data = tree_data,
method = "anova",
control = rpart.control(cp = 0),
model = TRUE
)
tree_model <- rpart(
HbA1c_Reduction ~ Treatment + BMI_Category + Physical_Activity,
data = data_3way,
method = "anova",
control = rpart.control(cp = 0),
model = TRUE
)
node_format <- function(x, labs, digits, varlen) {
# Get the model frame
frame <- x$frame
# Calculate standard error for each node
se <- sqrt(frame$dev/frame$n)
# Format mean and SE for display
mean_vals <- round(frame$yval, 1)
se_vals <- round(se, 1)
# Create labels with mean and SE
labels <- paste0(mean_vals, "\nÂ±", se_vals)
# Return the formatted labels
return(labels)
}
rpart.plot(tree_model,
main = "Decision Tree Visualisation",
roundint = FALSE,
fallen.leaves = TRUE,
box.palette = "GnBu",
branch.lty = 2,
shadow.col = "gray",
node.fun = node_format,
nn = TRUE,
split.cex = 0.8,  # Size of split labels
nn.cex = 0.8     # Size of node numbers
)
runApp()
runApp()
